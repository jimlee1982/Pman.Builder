{
    "id": "roo-file-3",
    "name": "Pman.Tab.BuilderTree",
    "parent": "Pman.Tab.BuilderTab",
    "title": "Pman.Tab.BuilderTree",
    "path": "/home/alan/gitlive/Pman.Builder/Pman.Tab.BuilderTree.bjs",
    "items": [
        {
            "region": "west",
            "xtype": "NestedLayoutPanel",
            "|xns": "Roo",
            "items": [
                {
                    "|xns": "Roo",
                    "xtype": "BorderLayout",
                    "*prop": "layout",
                    "items": [
                        {
                            "|xns": "Roo",
                            "xtype": "LayoutRegion",
                            "*prop": "center"
                        },
                        {
                            "*prop": "south",
                            "height": 300,
                            "split": true,
                            "xtype": "LayoutRegion",
                            "|xns": "Roo"
                        },
                        {
                            "listeners": {
                                "activate": "function (_self)\n{\n    if (_this.hasMouseEvent) {\n        return;\n    }\n    _this.hasMouseEvent = true;\n     this.el.on('mouseover', function() { _this.isMouseOver= true; });\n    this.el.on('mouseout', function() { _this.isMouseOver = false; });\n       \n\n}"
                            },
                            "region": "center",
                            "xtype": "TreePanel",
                            "|xns": "Roo",
                            "items": [
                                {
                                    "listeners": {
                                        "beforenodedrop": "function (dropEvent)\n\n{\n  /*tree - The TreePanel\n                        target - The node being targeted for the drop\n                        data - The drag data from the drag source\n                        point - The point of the drop - append, above or below\n                        source - The drag source\n                        rawEvent - Raw mouse event\n                        dropNode - Drop node(s) provided by the source OR you can supply node(s) to be inserted by setting them on this object.\n                        cancel - Set this to true to cancel the drop.*/\n                        \n                        if (!e.tree || !e.dropNode) {\n                            console.log('no tree or dropNode');\n                            return; // fixme drop of elements from palete..\n                        }\n                        var np = false; // new parent\n                        \n                        switch (e.point) {\n                            case 'above':\n                            case 'below':\n                                np = e.target.parentNode;\n                                break;\n                            case 'append':\n                                np = e.target;\n                                break;\n                        }\n                        \n                        // always drop onto own parent\n                        if (np == e.dropNode.parentNode) {\n                            if (e.rawEvent.ctrlKey) {\n                                e.dropNode = _this.dupeNode(e.dropNode);\n                            }\n                            return true;\n                        }\n   if (_this.canAppend(np, e.dropNode.elConfig)) {\n                            if (e.rawEvent.ctrlKey) {\n                                e.dropNode = _this.dupeNode(e.dropNode);\n                                  \n                                if (np.elConfig.xtype == 'GridEditor') {\n                                    e.dropNode.elConfig['*prop'] = 'field';\n                                }\n                                \n                            }\n                            return true;\n                        }  \n                        console.log('can not drop ' + e.dropNode.elConfig.xtype + ' ontop of ' + np.elConfig.xtype);\n                        \n                        \n                        \n                        return false;\n                        \n\n}",
                                        "nodedrop": "function (dropEvent)\n{\n    e.dropNode.setText(\n                            _this.configToText(e.dropNode.elConfig)\n                        );\n                        var bp = Pman.Tab.BuilderPanel;\n                        bp.redraw.defer(1000, bp, [true]);\n\n}",
                                        "click": "function (node, e)\n{\n\n}"
                                    },
                                    "*prop": "tree",
                                    "animate": false,
                                    "containerScroll": true,
                                    "ddGroup": "component",
                                    "enableDD": true,
                                    "rootVisible": true,
                                    "xtype": "TreePanel",
                                    "|renderer": "function(n) { return n.text; }",
                                    "|xns": "Roo.tree",
                                    "items": [
                                        {
                                            "|xns": "Roo.tree",
                                            "xtype": "DefaultSelectionModel",
                                            "*prop": "sm"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "region": "south",
                            "xtype": "ContentPanel",
                            "|xns": "Roo"
                        }
                    ]
                }
            ]
        }
    ],
    "permname": "",
    "modOrder": "001"
}